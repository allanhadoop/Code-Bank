# Source http://tldp.org/LDP/abs/html/tests.html

The (( ... )) and let ... constructs return an exit status, according to whether the arithmetic expressions they evaluate expand 
to a non-zero value. Bash sees [[ $a -lt $b ]] as a single element, which returns an exit status.

# The "let" construct returns the same exit status as the double-parentheses arithmetic expansion
(( 0 && 1 ))                 # Logical AND
echo $?     # 1     ***
# And so ...
let "num = (( 0 && 1 ))"
echo $num   # 0
# But ...
let "num = (( 0 && 1 ))"
echo $?     # 1     ***
----------------------------------- 

An if can test any command, not just conditions enclosed within brackets.
if cmp a b &> /dev/null  # Suppress output.
then echo "Files a and b are identical."
else echo "Files a and b differ."
fi

# The very useful "if-grep" construct: 
if grep -q gonsalves file
  then echo "File contains at least one occurrence of gonsalves."
fi

word=Linux
letter_sequence=inu
if echo "$word" | grep -q "$letter_sequence" ; then echo "inu found"; else  echo "not found"; fi      #inu found
# The "-q" option to grep suppresses output.


























