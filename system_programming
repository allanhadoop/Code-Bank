---Installation ---- 
Install gcc on centos7
	•	Yum group list             àCheck if “Development Tools” available
	•	Yum group install “Development Tools”        -- This wil install gcc compiler.
 
Write program in test1.c and then compile as below -
cc test1.c -o test1
Run text1 program as follows -
./text1


Some references - 
https://www.usna.edu/Users/cs/aviv/classes/ic221/s16/lec/1/lec.html#orgheadline8
https://www.usna.edu/Users/cs/aviv/classes/ic221/s16/lec/2/lec.html#orgheadline8
https://www.usna.edu/Users/cs/aviv/classes/ic221/s16/lec/.....

https://www.usna.edu/Users/cs/aviv/classes/ic221/s16/lec/13/lec.html#orgheadline8

---------
v1_read_Write.c

— 
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <errno.h>
#include <sys/types.h>
#include <unistd.h>

#define BUF_SIZE 8192

int main (int argc , char* argv[]) {

	int open_input, open_output;
	ssize_t ret_in , ret_out ; 
	char buffer[BUF_SIZE];

	if (argc != 3) 
	{	printf("Usage : file1 and file2");
		return 1; 
	}
	
	open_input = open(argv[1], O_RDONLY);
	if (open_input == -1) { 
	perror("inopen");
	return 	2; }

	open_output = open(argv[2], O_WRONLY | O_CREAT, 0644);
        if (open_output == -1) {	
        perror("outopen");
        return 	3; }


	while((ret_in = read(open_input, &buffer, BUF_SIZE)) > 0 ){
	       ret_out = write(open_output, &buffer, (ssize_t) ret_in);
	       if (ret_out != ret_in) { 
		perror("inoutissuewrite");
		return 4;
		} 
	
	};
	
		
	close(open_input);
	close(open_output);

	return (EXIT_SUCCESS);	
}

----------------
v1_lseek_position 

— 
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <errno.h>
#include <sys/types.h>
#include <unistd.h>
#include <string.h>
 
#define BUF_SIZE 100

int main(int argc, char* argv[]) {

	int sk_in , fdin;
	int pos;
	ssize_t r_in;
	const char *buf = "this is initial entry\n";

	fdin = open(argv[1], O_RDWR | O_CREAT, 0644 | O_APPEND) ;

	pos = lseek(fdin, (off_t) 5, SEEK_SET) ;

	r_in = pwrite(fdin , buf, strlen(buf), (off_t) 30 ) ;	
	printf("%d position", r_in);	
	if (r_in == (off_t) -1) { 
		perror("offset issue") ; 
		return 3; }

	sk_in = lseek(fdin, (off_t) 30, SEEK_SET);
	printf("new set position %d", sk_in) ; 

    	close(fdin);

    return (EXIT_SUCCESS);
}

---------------------- 
V3_select_Call.c
——

#include <stdio.h> 
#include <sys/time.h> 
#include <sys/types.h> 
#include <unistd.h>


#define TIMEOUT 5
#define BUF_LEN 1024



int main(void) { 

struct timeval tv;
fd_set readfds;
int ret_in, ret;;
char buf[BUF_LEN];
FD_ZERO(&readfds); 
FD_CLR(0, &readfds);
FD_SET(STDIN_FILENO, &readfds); 

tv.tv_sec = 5;
tv.tv_usec = 0;


ret_in = select(0, &readfds , NULL, NULL, &tv) ; 
if (ret_in == -1 ) { 
	perror ("couldnot block" ) ;
	return 1; }


if (FD_ISSET(STDIN_FILENO, &readfds)) {
    	read(STDIN_FILENO, buf, BUF_LEN);
	printf("\n\n\n ----print your data here----  %s\n\n", buf);			
} 

} 

----------------- ----------
v4_bufferIO_fopenfclose.c

— 
 #include <stdio.h> 

int main (void) {
 FILE *in, *out; 
 struct pirate { 
	char name[100]; 
	unsigned long booty; 
	unsigned int beard_len; 
	int age;	
} 



p,blackbeard = { "Edward Teach", 950, 48 , -40}; 

out = fopen ("data", "w"); 
fwrite(&blackbeard, sizeof (struct pirate), 1, out) ;
/* read man page of fwrite and fread , above 1 means number of times record will be written*/
fclose(out);


in = fopen ("data", "r"); 
fread (&p, sizeof (struct pirate), 1, in);
/* here 1 means number of times record will be read */
fclose(in);

printf ("name=\"%s\" booty=%lu beard_len=%u age=%d\n", p.name, p.booty, p.beard_len, p.age); 
return 0; 
}
-----------------------------
V5_bufferIO_fopenclose2.c

——— 
#include <stdio.h>
#include <stdlib.h>
#include <termios.h>
#include <unistd.h>

struct resources
{ 
	int number;
	char name[200];
};

int main () { 
	FILE *fp, *fpr; 
	int i=0;
	struct resources res;

	fp = fopen("/root/sysprog/mydata.txt", "w");
	if(fp == NULL) {
		printf("\n Error opening file" ) ; 
		exit(0) ; 
	}

	do { 
		printf("Enter your roll number") ; 
		scanf("%d", &res.number);
		
		printf("Enter your name");
		scanf("%s", res.name);		
		
		fwrite(&res ,sizeof(res),1 ,fp );
	i +=1;
	}while (i < 3) ;

	fclose(fp);
	

	fpr = fopen("/root/sysprog/mydata.txt", "r") ;
        if(fpr == NULL) {
                printf("\n Error opening file" ) ;
                exit(0) ;
        }

	while(fread(&res,sizeof(res),1,fpr) > 0) {
		printf("\n%d,%s", res.number, res.name);
	}

	fclose(fpr);

	return 0;

}
---------------------------
V6_bufferIO_fgetc 

—

#include <stdio.h>
#include <stdlib.h>

int main() { 
int c;
FILE *fds;

fds = fopen("/root/sysprog/mydata.txt", "r");

do {
if (feof(fds)) {
	break;
}
	c = fgetc(fds);
	printf("%c", c) ; 
} while(0);

fclose(fds);
return 0;
}
-------------------------------
V7_bufferIO_fgets

—— 
#include <stdio.h>

int main () {
   FILE *fp;
   char str[160];
   int i= 0;

   /* opening file for reading */
   fp = fopen("/root/sysprog/mydata.txt" , "r");

   do { 
      fgets (str, 60, fp);
      puts(str);
      i++;
   }while(i <6);
   fclose(fp);
   
   return(0);
}

-----------------------------
V8_readv 
——
#include <stdio.h> 
#include <sys/types.h> 
#include <sys/stat.h> 
#include <fcntl.h> 
#include <sys/uio.h>


int main () { 

/* define manual field structure 
   fopen
   map structure
   readv 
   loop over all lines 
   close file */

char line1[47], line2[49], line3[53];
int fd , i, j;
struct iovec iov[3];
ssize_t nr;


fd = open("/root/sysprog/mydata.txt", O_RDONLY );
if (fd == -1 )
{
 printf("file opening issue"); 
} 

iov[0].iov_base = line1;
iov[0].iov_len = sizeof(line1);
iov[1].iov_base = line2;
iov[1].iov_len = sizeof(line2);
iov[2].iov_base = line3;
iov[2].iov_len = sizeof(line3);

nr = readv(fd, iov, 3) ;
if (nr == -1) 
{
	printf("error reading file") ;
	return 1; 
}

for ( j = 0; j<3 ; j++) {
printf("%s " , iov[j].iov_base);
}

close(fd);
return 2;
}
------------------------------ 
V8_StringToken-strtok.c


———— 
#include <string.h>
#include <stdio.h>


int main () {
   char str[80] = "my name - is not there in the db - where to locate it";
   const char s[2] = "-";
   char *token;
   
   /* get the first token */
   token = strtok(str, s);
  
   /* walk through other tokens */
   while( token != NULL ) {
      printf( " %s\n", token );    
      token = strtok(NULL, s); 
   }
   return(0);
}
------------------------------
V9_MultiThreadManualLock.c

———— 
#include <stdio.h>

void flockfile(FILE *stream);
void funlockfile(FILE *stream);
int ftrylockfile(FILE *stream);


int main ()  { 

FILE *stream;
int i=0;

stream = fopen("/root/sysprog/data.txt","a+");
if( stream == NULL ) {
   printf("error opening file");
   return 1;
}
flockfile (stream); 

/* below is infinite lock due to i condition so file is locked forever to write. This is lock */
do {
fputs ("List of treasure:\n", stream); 
printf("fputs works, %d", i);
fputs (" (1) 500 gold coins\n", stream); 
fputs (" (2) Wonderfully ornate dishware\n", stream); 
i++;
}while(i =100);

funlockfile (stream);

fclose(stream);
return 0;
}
--------------------------------
V10_EPOLL_Incomplete_page97.C

——— 

#include <stdio.h>
#include <sys/epoll.h>


int epfd;

int main () { 

int fd, fd1 , fd2, fd3;
struct epoll_event event;
int ret;


fd1 = open ("/root/sysprog/mydata.txt", "r");
fd2 = open ("/root/sysprog/myd2.txt", "r"); 
fd3 = open ("/root/sysprog/myd3.txt", "r");

epfd = epoll_create(3); 

int epoll_ctl(  int epfd, 
	        int op, 
		int fd, 
		struct epoll_event *event);

event.data.fd = fd;	
event.events = EPOLLIN | EPOLLOUT;

epoll_ctl(epfd, EPOLL_CTL_ADD, fd1, &event);
epoll_ctl(epfd, EPOLL_CTL_ADD, fd2, &event);
epoll_ctl(epfd, EPOLL_CTL_ADD, fd3, &event);

return 0;

}

----------------------------- 
V11_writv.C

———— 
#include <stdio.h> 
#include <sys/types.h> 
#include <sys/stat.h> 
#include <fcntl.h> 
#include <string.h> 
#include <sys/uio.h>

int main () { 
ssize_t nr;
int fd;
int i;
struct iovec iov[3];
char *buf[] = { "this is first line", 
	        "this is second line",
               "this is third line", } ;

fd = open("/root/sysprog/mydata1.txt",O_WRONLY | O_CREAT) ; 
if ( fd == -1 ) {
	printf ("issue opening up file") ;
}

for (i = 0; i < 3; i++) {
    iov[i].iov_base = buf[i];
    iov[i].iov_len = strlen(buf[i]);
}

nr = writev (fd, iov,3) ; 
if (nr == -1) {
	printf("file write issue");
	return 1;
}

 close (fd);
return 0;

}

---------------------------
V12_statofthefile.c 

#include <unistd.h>
#include <stdio.h>
#include <sys/stat.h>
#include <sys/types.h>
 
int main(int argc, char **argv)
{
    struct stat fileStat;

    stat(argv[1],&fileStat) ;    
 
    printf("Information for %s\n",argv[1]);
    printf("---------------------------\n");
    printf("File Size: \t\t%d bytes\n",fileStat.st_size);
    printf("Number of Links: \t%d\n",fileStat.st_nlink);
    printf("File inode: \t\t%d\n",fileStat.st_ino);
 
    printf("File Permissions: \t");
    printf( (S_ISDIR(fileStat.st_mode)) ? "d" : "-");
    printf( (fileStat.st_mode & S_IRUSR) ? "r" : "-");
    printf( (fileStat.st_mode & S_IWUSR) ? "w" : "-");
    printf( (fileStat.st_mode & S_IXUSR) ? "x" : "-");
    printf( (fileStat.st_mode & S_IRGRP) ? "r" : "-");
    printf( (fileStat.st_mode & S_IWGRP) ? "w" : "-");
    printf( (fileStat.st_mode & S_IXGRP) ? "x" : "-");
    printf( (fileStat.st_mode & S_IROTH) ? "r" : "-");
    printf( (fileStat.st_mode & S_IWOTH) ? "w" : "-");
    printf( (fileStat.st_mode & S_IXOTH) ? "x" : "-");
    printf("\n\n");
 
    printf("The file %s a symbolic link\n", (S_ISLNK(fileStat.st_mode)) ? "is" : "is not");
 
    return 0;
}
--------------------------- 

————————————  —— ——  —————— 
 
int main()
{
    char buffer[150];
    char* s = "this data is now being stored into the buffer";
 
// Counting the character and storing in buffer using snprintf
    int j = snprintf(buffer, 45, "%s\n", s);
 

// Print the string stored in buffer and character count
    printf("string:\n%s\ncharacter count = %d\n",
                                     buffer, j);
 
    return 0;
}

————————————— —————————————— V1_POSIX_FADVISE.c
#include <stdio.h>
#include <unistd.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <error.h>
#include <string.h>
#include <assert.h>

#define BUF_SIZE 8192           

/*** file size function 
open input file
check filesize using function and also check data type at man page of fstat function
open output file
use posix to give instruction to kernel 
loop to write data
close input and output file ***/


static off_t getfsize(const char *filename) { 
	struct stat st = { 0 } ;
	if (stat(filename, &st) == 0) {
		return st.st_size;
	}
	return -1;	
	} 


int main (int argc, char **argv) { 
int fdin , fdout; 
ssize_t filesize = 0;
char buffer[8192]= { };

fdin = open(argv[1], O_RDONLY);

filesize = getfsize(argv[1]);
printf("%d filesize", filesize);

fdout = open(argv[2], O_WRONLY | O_CREAT ) ;

posix_fadvise(fdin, 0, filesize, POSIX_FADV_SEQUENTIAL);

while (1) { 
	filesize = read(fdin, &buffer, sizeof(BUF_SIZE)) ;
	if (!filesize) { 
		break;
	}
	assert(filesize>0);
	write(fdout,&buffer, filesize ); 
}

close(fdin);
close(fdout);

}

————————————— —————————————— V2_aio_read_AsynchronousRead.c 
#include <sys/types.h>
#include <aio.h>
#include <fcntl.h>
#include <errno.h>
#include <stdio.h>

#define BUF_SIZE 9000

int main () { 

/* open 
create control block structure 
aio_Read
wait til reading happens - check using aio_Error
final check returncode aio_return
delete buffer - dont know how to do this so left it
close file 
To run this code , cc -lrt <name of the this file.c> -o <name of the executable to be generated without extension">
*/



int fd; 
int *buffer[BUF_SIZE]; 
int getstatus ; 


fd = open("mydata.txt", O_RDONLY);


struct aiocb cb ; 
cb.aio_fildes = fd; 
cb.aio_offset = 0;
cb.aio_buf = &buffer;
cb.aio_nbytes = BUF_SIZE;

if (aio_read(&cb) == -1 ) {
	printf("unable to read file");
	close(fd);
}

while(aio_error(&cb) == EINPROGRESS) {
	printf("reading in progress\n");
}

getstatus = aio_return(&cb);
if (aio_return(&cb) != -1) {
	printf("------reading done---------\n-");
}

close(fd);
return 0;

}
————————————— —————————————— V3_PrintInodeOfFile.c 

#include <stdio.h> 
#include <stdlib.h> 
#include <fcntl.h> 
#include <sys/types.h> 
#include <sys/stat.h>

/*
 * get_inode - returns the inode of the file associated
 * with the given file descriptor, or -1 on failure
 */

int get_inode (int fd)
{
        struct stat buf;
        fstat (fd, &buf);
	return buf.st_ino;
}

int main (int argc, char *argv[])
{
        int fd, inode;
        
        fd = open (argv[1], O_RDONLY);

        inode = get_inode (fd);
        printf ("%d\n", inode);
return 0;
}

————————————— —————————————— V4_PhysLogBlock.c

#include <stdio.h> 
#include <stdlib.h> 
#include <fcntl.h> 
#include <sys/types.h> 
#include <sys/stat.h> 
#include <sys/ioctl.h> 
#include <linux/fs.h>

/*
* get_block - for the file associated with the given fd, 
returns * the physical block mapping to logical_block
*/
int get_block (int fd, int logical_block)
{

	ioctl (fd, FIBMAP, &logical_block);
	return logical_block;
}


/*
 * get_nr_blocks - returns the number of logical blocks
 * consumed by the file associated with fd
 */

int get_nr_blocks (int fd)
{
struct stat buf;
	fstat (fd, &buf);
	return buf.st_blocks;
}


/*
 * print_blocks - for each logical block consumed by the file
 * associated with fd, prints to standard out the tuple
 * "(logical block, physical block)"
 */
void print_blocks (int fd)
{
        int nr_blocks, i;
        nr_blocks = get_nr_blocks (fd);

        if (nr_blocks < 0) {
		fprintf (stderr, "get_nr_blocks failed!\n"); return;
	}
        if (nr_blocks == 0) {
                printf ("no allocated blocks\n");
        return;
} else if (nr_blocks == 1)
	printf ("1 block\n\n");
else
printf ("%d blocks\n\n", nr_blocks);

for (i = 0; i < nr_blocks; i++) {
        int phys_block;
        phys_block = get_block (fd, i);
        printf ("(%u, %u) ", i, phys_block);
	putchar ('\n');
   }
}


int main (int argc, char *argv[])
{
	int fd;
        fd = open (argv[1], O_RDONLY);
        print_blocks (fd);
        return 0;
}
————————————— —————————————— V5_EXECV_vector.c 
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>

int main () {
/*below we are running apache program with -t to check syntax */
char *args[] = {"/sbin/httpd" ,"-t", NULL } ; 

/*below args[0] is the program name and args is all command line variables */
execv(args[0], args) ; 

}
————————————— —————————————— V6_EXECLP_list.c 


#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>

int main () {
/*below we are running apache program with -t to check syntax */
char *args[] = {"/sbin/httpd" ,"-t", NULL } ; 

/*below args[0] is the program name and args is all command line variables */
execv(args[0], args) ; 

}
[root@ispuncentos 1oldprograms]# cat V6_EXECLP_list.c 
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/types.h>


int main() { 

 execlp("ls", "ls", "-l", "/", NULL) ;
 return 0;

} 

/*#include <stdio.h>
#include <unistd.h>

int main(int argc, const char* argv[]) {
  printf("Running ps with execlp\n");
  execlp("ps", "ps", "-ax", 0);
  printf("Done. \n");
  return 0;

}*/

————————————— —————————————— V6_EXECVP_vectorPath.c
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>


int main() { 

char *ls_args[] = { "httpd" , "-v", NULL};

/* in case of execvp , where last character p stands for path, we donot have to 
specify path of httpd package. System will automatically find that out and then fire command
-v for version */

execvp( ls_args[0], ls_args );


}
————————————— —————————————— V7_Fork.c

#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>


int main() { 

pid_t pid;
pid=fork( ); 

printf("PID is %d------------", pid);
if (!pid) { 
	execlp("ls","-l",NULL); 
/*  	execlp("ps", "ps", "-ax", 0); */
}

}
————————————— —————————————— V8_vfork.c

#include <stdio.h>  
#include <unistd.h>
#include <sys/types.h>
#include <stdlib.h>

int main()  
 {  
      pid_t pid;  
      printf("Parent\n");  
      pid = vfork();  
      if(pid==0)  
      {  
          printf("Child\n");  
     		_exit(0);   /* without this statement parent will not get released to child. Try remove
	//this line */	 
	}  
  }
————————————— —————————————— V8.1_vfork.c
#include <stdio.h>  
#include <unistd.h>
#include <sys/types.h>
#include <stdlib.h>

int main()  
 {  
      pid_t pid;  
      printf("Parent\n");  
      pid = vfork();  
      if(pid==0)  
      {  
          printf("Child\n");  
	  execl("/bin/ls", "ls", "-l" , NULL) ;
	}  
  }

————————————— —————————————— V9_atexit.c
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>

void out (void)
{
	printf ("atexit(  ) succeeded!\n");
}

int main (void)
{
if (atexit (out))
        fprintf(stderr, "atexit(  ) failed!\n");
	return 0;
}


/* // output of this program will be atexit(  )succeeded */

————————————— —————————————— V10_forkWait.c

/*///
The following example uses both the fork and the wait system calls. As before, 
the child process simply prints its pid 
and exits with a status of 0 (zero). After the fork system call, the parent process 
waits for the child to complete. After the child exits, the parent process prints its 
own pid and the pid of the child process. This is followed by the exit status 
of the child (zero in this case). 
When you run this program, the output produced by the child will appear first 
and then the output produced by the parent. 
Thus, the outputs of the two processes won’t be interleaved.
Technically it works like a fork block and else block. Whatever is in fork block is all child
and whatever starts with wait into else block is parent block.
*/
#include <stdio.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
#include <stdlib.h>

int main(void) { 

int cstatus;
pid_t cpid;
pid_t ppid;
pid_t c;

if ((cpid = fork( )) == 0) { 
	printf("this is child world with pid %ld\n", getpid());
	exit(1); }
else { 
	c = wait(&cstatus);
	printf("Parent: PID of Parent = %ld\n", (long) getpid());	
	printf("Parent: Child  %ld exited with status =  %d\n",
        	       (long) c, cstatus);
}
return 0;
}

————————————— —————————————— V11_forwait2.c
#include<stdio.h>
#include<stdlib.h>
#include<sys/wait.h>
#include<unistd.h>
 
/* in this example, technically child and parent process is coded separtely under for loop */
void waitexample()
{
    int i, stat;
    pid_t pid[5];
    for (i=0; i<5; i++)
    {
        if ((pid[i] = fork()) == 0)
        {
            sleep(1);
            exit(100 + i);
        }
    }
 
    // Using waitpid() and printing exit status
    // of children.
    for (i=0; i<5; i++)
    {
        pid_t cpid = waitpid(pid[i], &stat, 0);
        if (WIFEXITED(stat))
            printf("Child %d terminated with status: %d\n",
                   cpid, WEXITSTATUS(stat));
    }
}
 
// Driver code
int main()
{
    waitexample();
    return 0;
}

————————————— —————————————— V12.forkWait-status.c
/* This program forks a child, which immediately exits. The parent process then executes the wait( ) 
system call to determine the status of its child. The process prints the child's pid, and how it died. 
*/

#include <unistd.h> 
#include <stdio.h> 
#include <sys/types.h> 
#include <sys/wait.h>
#include <stdlib.h>

int main (void)
{

 int status;
 pid_t pid;

 if (!fork (  ))
         return 1;  

 pid = wait (&status);
 printf ("pid=%d\n", pid); 
 if (pid == -1)
         perror ("wait");
 if (WIFEXITED (status))
         printf ("Normal termination with exit status=%d\n",
                 WEXITSTATUS (status));
 if (WIFSIGNALED (status))
         printf ("Killed by signal=%d%s\n",
                 WTERMSIG (status),
                 WCOREDUMP (status) ? " (dumped core)" : "");
 if (WIFSTOPPED (status))
         printf ("Stopped by signal=%d\n",
                 WSTOPSIG (status));
 if (WIFCONTINUED (status))
         printf ("Continued\n");
 return 0;
}

————————————— —————————————— V13_forkwait3.c
/*The following program demonstrates the use of fork(2) and waitpid().  The program creates a child  process.
       If  no  command-line  argument  is  supplied  to  the  program, then the child suspends its execution using
       pause(2), to allow the user to send signals to the child.  Otherwise, if a command-line  argument  is  sup‐
       plied, then the child exits immediately, using the integer supplied on the command line as the exit status.
       The parent process executes a loop that monitors the child  using  waitpid(),  and  uses  the  W*()  macros
       described above to analyze the wait status value. */


#include <sys/wait.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>

 int
       main(int argc, char *argv[])
       {
           pid_t cpid, w;
           int status;

           cpid = fork();
           if (cpid == -1) {
               perror("fork");
               exit(EXIT_FAILURE);
           }

           if (cpid == 0) {            /* Code executed by child */
               printf("Child PID is %ld\n", (long) getpid());
               if (argc == 1)
                   pause();                    /* Wait for signals */
               _exit(atoi(argv[1]));

           } else {                    /* Code executed by parent */
               do {
                   w = waitpid(cpid, &status, WUNTRACED | WCONTINUED);
                   if (w == -1) {
                       perror("waitpid");
                       exit(EXIT_FAILURE);
                   }

                   if (WIFEXITED(status)) {
                       printf("exited, status=%d\n", WEXITSTATUS(status));
                   } else if (WIFSIGNALED(status)) {
                       printf("killed by signal %d\n", WTERMSIG(status));
                   } else if (WIFSTOPPED(status)) {
                       printf("stopped by signal %d\n", WSTOPSIG(status));
                   } else if (WIFCONTINUED(status)) {
                       printf("continued\n");
                   }
               } while (!WIFEXITED(status) && !WIFSIGNALED(status));
               exit(EXIT_SUCCESS);
           }
       }
————————————— —————————————— V14_system.c
#include <unistd.h> 
#include <stdio.h> 
#include <sys/types.h> 
#include <sys/wait.h>
#include <stdlib.h>
#include <string.h>

int main () {
   char command[50];
   int ret;
   
	strcpy( command, "ls -l");
	ret = system(command) ; 
	if (WIFSIGNALED (ret) && (WTERMSIG (ret) == SIGINT || WTERMSIG (ret) == SIGQUIT) )
	{
	 printf("system process is killed by signal") ; 
	} 
	else 
	{ 
	printf( "%d print this----", ret); 
	}

   return(0);
} 
————————————— —————————————— V15_exit_exitfunctions.c
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>


int main() { 

printf("will print"); /*since we are doing emergency exit _exit(0) , this will not be printed*/
/*fflush(stdout); /*this command will flush or write buffer to memory so above print will be printed*/ 
/*_exit(0) ; */

/* if you donot want to use above fflush command then use proper exit(0) library function which will
execute code to flush buffer to memory and will print above line*/

exit(0);

}

————————————— —————————————— V16_exit_buffermodes.c
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>


int main() { 

/* there are three modes _IONBF unbuffered ; _IOLBF line buffered and _IOFBF fully buffered
so if we use \n for line buffered then even with emergency exit _exit(0) , we will print that
at stderr . _IONBF is to write data directly to memory without any buffer and I_OFBF can be used to print 
if we fflush buffer data to memory prior to _exit(0) */

setvbuf(stderr, NULL, _IOFBF, 0);  
fprintf(stderr, "will not print b/c stderr is\n now lined buffered");

_exit(0) ; 

}

————————————— —————————————— V17_Atexit_handler.c 
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>


void firstfun() { 
	printf("this is At exit handler1\n ") ;
}

void secondfun() { 
	printf("this is second At exit handler2\n");
}

int main() { 
	int status;

	atexit(firstfun);
	atexit(secondfun);
	exit(status);	
}

————————————— —————————————— V17_parentwaitstatus.c

#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>

#include <sys/types.h>
#include <sys/wait.h>

int main(int argc, char * argv[]){
  //arguments for ls, will run: ls  -l /bin                                                                                                                                  
  char * ls_args[3] = { "ls", "-l", NULL} ;
  pid_t c_pid, pid;
  int status;

  c_pid = fork();

  if (c_pid == 0){
    /* CHILD */

    printf("Child: executing ls%d\n", getpid());

    //execute ls                                                                                                                                                               
    execvp( ls_args[0], ls_args);
    //only get here if exec failed                                                                                                                                             
    perror("execve failed");
  }else if (c_pid > 0){
    /* PARENT */
    
    if( (pid = wait(&status)) < 0){
      perror("wait");
      _exit(1);
    }

    printf("Parent:%d finished\n",getppid());

  }else{
    perror("fork failed");
    _exit(1);
  }

  return 0; //return success
}

————————————— —————————————— V18_ppid.c

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

/* shell is the parent of this program so parent pid will remain same even if we run this program several times */

int main()  { 

pid_t pid, ppid;


pid = getpid() ; 
ppid = getppid() ; 


printf("child pid %d\n", pid) ;
printf("parent pid %d\n", ppid) ;

return 0;
}

————————————— —————————————— V19_SetupProcessPriority.c 


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

/* shell is the parent of this program so parent pid will remain same even if we run this program several times */

int main()  { 

pid_t pid, ppid;


pid = getpid() ; 
ppid = getppid() ; 


printf("child pid %d\n", pid) ;
printf("parent pid %d\n", ppid) ;

return 0;
}
[root@ispuncentos 1oldprograms]# cat V19_SetupProcessPriority.c 
#include <stdlib.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/resource.h>

/* Priority is from -20 to +10. - means mean prioroty , it has high preference and positive ones 
are nice ones which has low priority */

int main() { 

	int prio; 
	prio = getpriority(PRIO_PROCESS, 0) ;

	printf("Priority %d\n", prio); /* by default priority will be 0 which we can change using
nice() system call as shown below */

        prio = nice(20);
        printf("new priority is %d\n",prio); 
	return 0;

}

——————————————————— V20_get_process_grp_programming.c

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

/*getpgrp.c*/
int main(int argc, char * argv[]){

  pid_t pid, pgid; //process id and process group for this program                                                                         
  pid_t ppid, ppgid; //process id and proces group for the _parent_                                                                        

  //current 
  pid = getpid();
  pgid = getpgrp();

  //parent
  ppid = getppid();
  ppgid = getpgid(ppid);

  //print this parent's process pid and pgid                                                                                               
  printf("%s: (current) pid:%d pgid:%d\n", argv[0], pid, pgid);
  printf("%s: (parrent) ppid:%d pgid:%d\n", argv[0], ppid, ppgid);

  return 0;
}

——————————————— V21_set_proces_grp.c
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

/*setpgrp.c*/
int main(int argc, char * argv[]){

  pid_t cpid, pid, pgid, cpgid; //process id's and process groups

  cpid = fork();

  if( cpid == 0 ){
    //set process group to itself
    setpgrp();

    //print the pid, and pgid of child from child
    pid = getpid();
    pgid = getpgrp();
    printf("Child:          pid:%d pgid:*%d*\n", pid, pgid);

  }else if( cpid > 0 ){
    //print the pid, and pgid of parent
    pid = getpid();
    pgid = getpgrp();
    printf("Parent:         pid:%d pgid: %d \n", pid, pgid);    

    //print the pid, and pgid of child from parent
    cpgid = getpgid(cpid);
    printf("Parent: Child's pid:%d pgid:*%d*\n", cpid, cpgid);

  }else{
    perror("fork");
    _exit(1);
  }

  return 0;
}


—————————————— ——————— V22_process_race_condition.c
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main () { 

pid_t c_pid , p_pid;

c_pid = fork();

if (c_pid == 0)  {
setpgrp();
printf("child pid %d and group pid %d \n", getpid(), getpgrp());
}


return 0;
}

