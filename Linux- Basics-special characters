# Source http://tldp.org/LDP/abs/html/part2.html
# Special characters 

#!/bin/bash


# Comment 
echo The # here begins a comment.
echo ${PATH#*:}       # Parameter substitution, not a comment.
echo $(( 2#101011 ))  # Base conversion, not a comment.

;  Command separator
echo hello; echo there

;; Terminator in case statement 
variable=xyz
case "$variable" in
  abc)  echo "\$variable = abc" ;;
  xyz)  echo "\$variable = xyz" ;;      #output will be $variable = xyz
esac

. When working with filenames, a leading dot is the prefix of a "hidden" file,
. a single dot represents the current working directory, and two dots denote the parent directory
" partial quoting - "STRING" preserves (from interpretation) most of the special characters within STRING
' full quoting .'STRING' preserves all special characters within STRING. This is a stronger form of quoting than "STRING"
, The comma operator links together a series of arithmetic operations. All are evaluated, but only the last one is returned.

for file in /{,usr/}bin/*calc
#             ^    Find all executable files ending in "calc"
#+                 in /bin and /usr/bin directories.
do
        if [ -x "$file" ]
        then
          echo $file
        fi
done
----------------------------------------------------------------
\ escape. A quoting mechanism for single characters.\X escapes the character X
` The `command` construct makes available the output of command for assignment to a variable.
: Multple use as follows - while use, placeholder use, truncate file length to zero  and non-empty functions

while :
do
   operation-1
   ...
done

: ${username=`whoami`}
# ${username=`whoami`}   Gives an error without the leading :
#                        unless "username" is a command or builtin...


: > data.xxx   # File "data.xxx" now empty.	      
# Same effect as   cat /dev/null >data.xxx
# However, this does not fork a new process, since ":" is a builtin.

not_empty ()
{
  :
} # Contains a : (null command), and so is not empty.
----------------------------------------------------------------
* The * character serves as a "wild card" for filename expansion in globbing. The * also represents any number (or zero) characters in a regular expression.
? test operator. Within certain expressions, the ? indicates a test for a condition. The ? character serves as a single-character "wild card" for filename expansion in globbing
(( var0 = var1<98?9:21 ))
#                ^ ^
 
$ Variable substitution. It also means end-of-line. In a regular expression, a "$" addresses the end of a line of text.
var1=5
echo $var1

${} Parameter substitution
$' ... '   Quoted string expansion
$*, $@ positional parameters
$? Exit status
$$ process id variable
() command group.  (a=hello; echo $a)
----------------------------------------------------------------
{xxx,yyy,zzz,...} Brace expansion
cat {file1,file2,file3} > combined_file  # Concatenates the files file1, file2, and file3 into combined_file.
cp file22.{txt,backup}   # Copies "file22.txt" to "file22.backup"
{a..z} Expanded brace expansion . echo {0..3} # 0 1 2 3

{} Block of code 
a=888 ; { echo $a; } > "test.txt"       # here we are pushing value of a 888 into file.

{} placeholder for text
ls . | xargs -i -t cp ./{} $1           # -t means verbose, -i means replace string and xargs means argument . {} placeholder for output text
#            ^^         ^^
# From "ex42.sh" (copydir.sh) example.

{} \;    pathname. Mostly used in find constructs
[ ]  test and also used as array element and range of characters
[[ ]]  test
$[ ... ] integrer expansion  . a=3  b=7  echo $[$a+$b]   # 10
(( )) integrer expansion 
----------------------------------------------------------------
> &> >& >> < <> Redirection 
scriptname >filename redirects the output of scriptname to file filename. Overwrite filename if it already exists.
command &>filename redirects both the stdout and the stderr of command to filename.
a=3 ; b=5 ; echo $[$a+$b] &> "test.txt"
command >&2 redirects stdout of command to stderr.
scriptname >>filename appends the output of scriptname to file filename. If filename does not already exist, it is created.
[i]<>filename opens file filename for reading and writing, and assigns file descriptor i to it. If filename does not exist, it is created.
The file descriptors for stdin, stdout, and stderr are 0, 1, and 2

<< redirection used in a here document.
<<< redirection used in a here string.

\<, \> word boundary in a regular expression. 
bash$ grep '\<the\>' textfile    here we are searching the word in file testfile
----------------------------------------------------------------
| Passes the output (stdout) of a previous command to the input (stdin) of the next one, or to the shell. This is a method of chaining commands together.
cat test.txt | sort | uniq  # sorts test.txt file and delete duplicate lines
bash$ ls -l | ./uppercase.sh      # pipe the output of ls -l to this script.

>|  This will force redirection (even if the noclobber option is set). This will forcibly overwrite an existing file.
||  or operation 
&  Run job in background. A command followed by an & will run in the background. bash$ sleep 10 &
#!/bin/bash 
for i in {1..10}
do 
  echo -n “$i “
done &                                       # this will run script in background
----------------------------------------------------------------
&& AND logical operator
-- The double-dash -- prefixes long (verbatim) options to commands.
sort --ignore-leading-blanks
bash$ rm -- -filename        # removing files whose names begin with a dash.
- option, prefix   . Example ls -l 
- redirection from/to stdin or stdout [dash].

bash$ echo "whatever" | cat -
whatever               # Where a filename is expected, - redirects output to stdout
---
bash$ file -                        # This causes the shell to await user input.
abc
standard input:              ASCII text
---
(cd /source/directory && tar cf - . ) | (cd /dest/directory && tar xpvf -)
here in above command 
cd /source/directory - source directory 
&& if cd command is successful then execute tar cf - . command
The 'c' option 'tar' archiving command creates a new archive,
the 'f' (file) option, followed by '-' designates the target file as stdout, and do it in current directory tree ('.')
Pipe above archive file to cd /dest/directory and if succssfully found then 
tar xpvf -
Unarchive ('x'), preserve ownership and file permissions ('p'), and send verbose messages to stdout ('v'), reading data from stdin ('f' followed by '-').
'x' is a command, and 'p', 'v', 'f' are options.
So basically first - before pipe is to redirect to stdout and last - is to read from stdinput

----------------------------------------------------------------
- previous working directory. cd - command changes to the previous working directory.
~+ current working directory. This corresponds to the $PWD internal variable.
~- previous working directory. This corresponds to the $OLDPWD internal variable.
=~ regular expression match.
^ beginning-of-line. In a regular expression, a "^" addresses the beginning of a line of text.
^, ^^ Uppercase conversion in parameter substitution










